#!/usr/bin/env bash
# Copyright 2023 SAP SE or an SAP affiliate company
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

# generatePKI function will generate CA key, CA cert, ETCD server key and ETCD server cert.
# These PKI resources will be used by all unit tests. This script assumes that cfssl and cfssljson
# binaries are already installed and added to the PATH.
generatePKI() {
  if [ $# -ne 1 ]; then
    echo "generatePKI function expects pki directory path to be passed as an argument"
    exit 1
  fi
  local pki_dir="$1"
  createCAConfig "${pki_dir}"
  createCACSRConfig "${pki_dir}"
  createEtcdCSRConfig "${pki_dir}"
  echo "> Generating CA Key and Certificate..."
  cfssl gencert -initca "${pki_dir}"/ca-csr.json | cfssljson -bare "${pki_dir}"/ca
  echo "> Generating ETCD Server Key and Certificate..."
  cfssl gencert \
    -ca "${pki_dir}"/ca.pem \
    -ca-key "${pki_dir}"/ca-key.pem \
    -config "${pki_dir}"/ca-config.json \
    "${pki_dir}"/etcd-req-csr.json | cfssljson -bare "${pki_dir}"/etcd-01
}

createCAConfig() {
  if [ $# -ne 1 ]; then
    echo "createCAConfig function expects pki directory path to be passed as an argument"
    exit 1
  fi
  local pki_dir="$1"
  local path="${pki_dir}"/ca-config.json
  echo "writing ${path}"
  cat >"${path}" <<EOF
  {
    "signing": {
      "default": {
        "usages": [
          "signing",
          "key encipherment",
          "server auth",
          "client auth"
        ],
        "expiry": "1h"
      }
    }
  }
EOF
}

createCACSRConfig() {
  if [ $# -ne 1 ]; then
    echo "createCACSRConfig function expects pki directory path to be passed as an argument"
    exit 1
  fi
  local pki_dir="$1"
  local path="${pki_dir}"/ca-csr.json
  echo "writing ${path}"
  cat >"${path}" <<EOF
  {
    "CN": "Autogenerated CA For Tests",
    "key": {
      "algo": "rsa",
      "size": 2048
    },
    "names": [
      {
        "O": "SAP SE",
        "OU": "Gardener",
        "L": "Walldorf",
        "ST": "BW",
        "C": "DE"
      }
    ]
  }
EOF
}

createEtcdCSRConfig() {
  if [ $# -ne 1 ]; then
    echo "createEtcdCSRConfig function expects pki directory path to be passed as an argument"
    exit 1
  fi
  local pki_dir="$1"
  local path="${pki_dir}"/etcd-req-csr.json
  echo "writing ${path}"
  cat >"${path}" <<EOF
  {
    "CN": "etcd",
    "hosts": [
      "localhost",
      "127.0.0.1"
    ],
    "key": {
      "algo": "rsa",
      "size": 2048
    },
    "names": [
      {
        "O": "autogenerated",
        "OU": "etcd cluster",
        "L": "tests"
      }
    ]
  }
EOF
}

# cleanupPKI will remove the test resources folder that is passed as a paramter to this function.
# This is automatically called post running tests from test.sh. If used manually it should be called explicitly.
cleanupPKI() {
  if [ $# -ne 1 ]; then
    echo "cleanupPKI function expects pki directory path to be passed as an argument"
    exit 1
  fi
  local pki_dir="$1"
  echo "> Removing directory: ${pki_dir}"
  rm -rf "${pki_dir}"
}
